function1_name,function2_name,file_name_function1,file_name_function2,parameter_passed,level_of_abstraction_function1,level_of_abstraction_function2,mapping_type,code_function1,code_function2
mainjava,MathUtils.add,MainApp.java,unknown,[],High-level (Application),Unknown,Direct,"mainjava(String[] args) {
        int sum = MathUtils.add(5, 3);
        int prod = MathUtils.multiplyjava(sum, 4);
        int pow = MathUtils.power(2, 3);
        displayResult(prod, pow);
    }",
mainjava,MathUtils.multiplyjava,MainApp.java,unknown,[],High-level (Application),Unknown,Direct,"mainjava(String[] args) {
        int sum = MathUtils.add(5, 3);
        int prod = MathUtils.multiplyjava(sum, 4);
        int pow = MathUtils.power(2, 3);
        displayResult(prod, pow);
    }",
mainjava,MathUtils.power,MainApp.java,unknown,[],High-level (Application),Unknown,Direct,"mainjava(String[] args) {
        int sum = MathUtils.add(5, 3);
        int prod = MathUtils.multiplyjava(sum, 4);
        int pow = MathUtils.power(2, 3);
        displayResult(prod, pow);
    }",
mainjava,displayResult,MainApp.java,MainApp.java,"[['prod', 'pow']]",High-level (Application),Mid-level (Logic),Direct,"mainjava(String[] args) {
        int sum = MathUtils.add(5, 3);
        int prod = MathUtils.multiplyjava(sum, 4);
        int pow = MathUtils.power(2, 3);
        displayResult(prod, pow);
    }","displayResult(int x, int y) {
        System.out.println(""Product: "" + x);
        System.out.println(""Power: "" + y);
    }"
displayResult,System.out.println,MainApp.java,unknown,[],Mid-level (Logic),Unknown,Direct,"displayResult(int x, int y) {
        System.out.println(""Product: "" + x);
        System.out.println(""Power: "" + y);
    }",
displayResult,System.out.println,MainApp.java,unknown,[],Mid-level (Logic),Unknown,Direct,"displayResult(int x, int y) {
        System.out.println(""Product: "" + x);
        System.out.println(""Power: "" + y);
    }",
process_data,square,main.py,utils.py,[['d']],Mid-level (Logic),Mid-level (Logic),Direct,"def process_data(data):
    total = 0
    for d in data:
        total += square(d)
    return total","def square(x):
    return multiply(x, x)"
main,process_data,main.py,main.py,[['values']],High-level (Application),Mid-level (Logic),Direct,"def main():
    values = [2, 3, 4]
    result = process_data(values)
    print(""Processed:"", result)","def process_data(data):
    total = 0
    for d in data:
        total += square(d)
    return total"
main,print,main.py,unknown,"[[""'Processed:'"", 'result']]",High-level (Application),Unknown,,"def main():
    values = [2, 3, 4]
    result = process_data(values)
    print(""Processed:"", result)",
power,multiply,utils.java,utils.py,"[['result', 'base']]",High-level (Application),Low-level (Utility),,"power(int base, int exp) {
        int result = 1;
        for (int i = 0; i < exp; i++) {
            result = multiply(result, base);
        }","def multiply(a, b):
    return a * b"
square,multiply,utils.py,utils.py,"[['x', 'x']]",Mid-level (Logic),Low-level (Utility),Direct,"def square(x):
    return multiply(x, x)","def multiply(a, b):
    return a * b"
